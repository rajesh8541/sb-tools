{"version":3,"sources":["./src/app/modules/xml-json/xml-json.component.ts","./src/app/modules/xml-json/xml-json.component.html","./node_modules/ngx-xml2json/__ivy_ngcc__/fesm2015/ngx-xml2json.js","./src/app/modules/xml-json/xml-json.module.ts"],"names":[],"mappings":"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","file":"modules-xml-json-xml-json-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { SEOService } from 'src/app/services/seo.service';\nimport { NgxXml2jsonService } from 'ngx-xml2json';\n@Component({\n  selector: 'app-xml-json',\n  templateUrl: './xml-json.component.html',\n  styleUrls: ['./xml-json.component.scss'],\n})\nexport class XmlJsonComponent implements OnInit {\n  title = 'Online XML to JSON Convertor';\n  subtitle =\n    'We provide free online XML to JSON Convertor which will help many developers in their daily work.';\n\n  childInputText = '';\n  result = '';\n  outputText = '';\n  constructor(\n    private seo: SEOService,\n    private ngxXml2jsonService: NgxXml2jsonService\n  ) {}\n\n  ngOnInit(): void {\n    this.seo.setSEO(this.title, this.subtitle);\n  }\n\n  convert(): void {\n    const xml = this.childInputText;\n    const parser = new DOMParser();\n    const xml_ = parser.parseFromString(xml.replace(/\\s/g, ''), 'text/xml');\n    const obj = this.ngxXml2jsonService.xmlToJson(xml_);\n    const errorMsg = xml_.querySelector('parsererror');\n    if (errorMsg) {\n      this.outputText = 'INVALID XML INPUT';\n    } else {\n      this.outputText = JSON.stringify(obj, null, 4);\n    }\n  }\n\n  onCopy(): void {\n    console.log('Asd');\n  }\n\n  clearOutputData(): void {\n    console.log('Asd');\n  }\n}\n","<app-sb-heading [title]=\"title\" [subtitle]=\"subtitle\"></app-sb-heading>\n\n<div class=\"tool-container\">\n  <app-sb-textarea\n    [type]=\"'input'\"\n    class=\"text-area\"\n    (event)=\"childInputText = $event\"\n  ></app-sb-textarea>\n  <div class=\"button-align\">\n    <button class=\"btn\" (click)=\"convert()\">XML TO JSON</button>\n  </div>\n  <app-sb-textarea\n    [type]=\"'output'\"\n    class=\"text-area\"\n    [parentData]=\"outputText\"\n  ></app-sb-textarea>\n</div>\n\n<div class=\"grid-container text-container\">\n  <div>\n    <p>\n      XML to JSON converter helps us to convert XML file to JSON file.<br />\n      It's changes XML tree elements into the JSON key-value within a seconds.\n    </p>\n    <h2>How to convert XML to JSON?</h2>\n    <p>To convert XML code, follow the below steps:</p>\n    <ol>\n      <li>Write or paste XML code in the input box.</li>\n      <li>Click the XML TO JSON button.</li>\n    </ol>\n    <p>\n      You can also convert your JSON code to XML by using our\n      <a [routerLink]=\"'/json-to-xml-convertor/'\">JSON to XML converter</a>.\n    </p>\n    <h2>What are XML and JSON?</h2>\n    <p>\n      XML stands for Extensible Markup Language is a markup language like HTML,\n      it was originated from SGML for web use. It is used to represent\n      structured text as well as to transfer data across the internet.\n    </p>\n    <p>\n      JSON is an open standard file format and data interchange format that uses\n      human-readable text to store and transmit data objects consisting of\n      attribute–value pairs and arrays.\n    </p>\n    <p>JSON is commanly used for transmitting the data in the Web.</p>\n    <h2>How does this converter work?</h2>\n    <p>\n      The XML to JSON converter, Converts the XML tree structure code to JSON\n      structure which basically contains objets and arrays.\n    </p>\n    <h3>XML Conversion Example:</h3>\n    <p>\n      Once you Write or paste the XMl code our tool will convert that to\n      JSON:<br />\n      <br />\n      The common rules to convert XMl to JSON:\n    </p>\n    <ul>\n      <li>\n        The XML tags or attributes of the structure will be treated as JSON\n        properties.\n      </li>\n      <li>\n        if two are more root elements with same name will be traeted as array.\n      </li>\n      <li>\n        The namespaces in the code are captured from the resulting property\n        names.\n      </li>\n    </ul>\n    <h3>JSON Conversion Example:</h3>\n    <p>\n      Once you Write or paste the JSON code our tool will convert that to\n      XML:<br />\n      The common rules to convert JSON to XML:\n    </p>\n    <ul>\n      <li>JSON properties value will be converted to #item types.</li>\n      <li>\n        Root element is created and the offending characters will be XML\n        escaped.\n      </li>\n\n      <li>Array entries will be converted to individual XML root elements.</li>\n    </ul>\n    <h2>Why use this converter?</h2>\n    <p>\n      It is a easy to use tool which help programmer to format his data XML to\n      JSON or vice versa.<br />\n      even we provide the example to the users:\n    </p>\n    <h3>Get an Example</h3>\n    <p>Our tool provide quick example to the users.</p>\n    <h3>Download Report</h3>\n    <p>\n      Once we done with the conversion it allow users to share or download the\n      converted file.\n    </p>\n  </div>\n  <div>\n    <app-sb-related-tools></app-sb-related-tools>\n  </div>\n</div>\n","import { Injectable, Component, NgModule, defineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass NgxXml2jsonService {\n    constructor() { }\n    /**\n     * @param {?} xml\n     * @return {?}\n     */\n    xmlToJson(xml) {\n        let /** @type {?} */ obj = {};\n        if (xml.nodeType === 1) {\n            if (xml.attributes.length > 0) {\n                obj['@attributes'] = {};\n                for (let /** @type {?} */ j = 0; j < xml.attributes.length; j += 1) {\n                    const /** @type {?} */ attribute = xml.attributes.item(j);\n                    obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\n                }\n            }\n        }\n        else if (xml.nodeType === 3) {\n            obj = xml.nodeValue;\n        }\n        if (xml.hasChildNodes() && xml.childNodes.length === 1 && xml.childNodes[0].nodeType === 3) {\n            obj = xml.childNodes[0].nodeValue;\n        }\n        else if (xml.hasChildNodes()) {\n            for (let /** @type {?} */ i = 0; i < xml.childNodes.length; i += 1) {\n                const /** @type {?} */ item = xml.childNodes.item(i);\n                const /** @type {?} */ nodeName = item.nodeName;\n                if (typeof (obj[nodeName]) === 'undefined') {\n                    obj[nodeName] = this.xmlToJson(item);\n                }\n                else {\n                    if (typeof (obj[nodeName].push) === 'undefined') {\n                        const /** @type {?} */ old = obj[nodeName];\n                        obj[nodeName] = [];\n                        obj[nodeName].push(old);\n                    }\n                    obj[nodeName].push(this.xmlToJson(item));\n                }\n            }\n        }\n        return obj;\n    }\n}\nNgxXml2jsonService.ɵfac = function NgxXml2jsonService_Factory(t) { return new (t || NgxXml2jsonService)(); };\nNgxXml2jsonService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxXml2jsonService, factory: NgxXml2jsonService.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nNgxXml2jsonService.ctorParameters = () => [];\n/** @nocollapse */ NgxXml2jsonService.ngInjectableDef = defineInjectable({ factory: function NgxXml2jsonService_Factory() { return new NgxXml2jsonService(); }, token: NgxXml2jsonService, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxXml2jsonService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass NgxXml2jsonComponent {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    ngOnInit() { }\n}\nNgxXml2jsonComponent.ɵfac = function NgxXml2jsonComponent_Factory(t) { return new (t || NgxXml2jsonComponent)(); };\nNgxXml2jsonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxXml2jsonComponent, selectors: [[\"lib-ngx-xml2json\"]], decls: 2, vars: 0, template: function NgxXml2jsonComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"p\");\n        ɵngcc0.ɵɵtext(1, \" Ngx-xml2json \");\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2 });\n/** @nocollapse */\nNgxXml2jsonComponent.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxXml2jsonComponent, [{\n        type: Component,\n        args: [{\n                selector: 'lib-ngx-xml2json',\n                template: `\n    <p>\n      Ngx-xml2json\n    </p>\n  `,\n                styles: []\n            }]\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass NgxXml2jsonModule {\n}\nNgxXml2jsonModule.ɵfac = function NgxXml2jsonModule_Factory(t) { return new (t || NgxXml2jsonModule)(); };\nNgxXml2jsonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxXml2jsonModule });\nNgxXml2jsonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxXml2jsonModule, { declarations: [NgxXml2jsonComponent], exports: [NgxXml2jsonComponent] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxXml2jsonModule, [{\n        type: NgModule,\n        args: [{\n                imports: [],\n                declarations: [NgxXml2jsonComponent],\n                exports: [NgxXml2jsonComponent]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { NgxXml2jsonService, NgxXml2jsonComponent, NgxXml2jsonModule };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXhtbDJqc29uLmpzIiwic291cmNlcyI6WyJuZ3gteG1sMmpzb24vbGliL25neC14bWwyanNvbi5zZXJ2aWNlLnRzIiwibmd4LXhtbDJqc29uL2xpYi9uZ3gteG1sMmpzb24uY29tcG9uZW50LnRzIiwibmd4LXhtbDJqc29uL2xpYi9uZ3gteG1sMmpzb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUEyQixJQU96QixpQkFBaUI7QUFDbkI7QUFDTztBQUVFO0FBRUE7QUFBUSxJQUpmLFNBQVMsQ0FBQyxHQUFHO0FBQ2YsUUFDSSxxQkFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLFFBQ0ksSUFBSSxHQUFHLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtBQUM1QixZQUFNLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3JDLGdCQUFRLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDaEMsZ0JBQVEsS0FBSyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzNELG9CQUFVLHVCQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRCxvQkFBVSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDdkUsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSztBQUFDLGFBQUssSUFBSSxHQUFHLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtBQUNuQyxZQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO0FBQzFCLFNBQUs7QUFDTCxRQUNJLElBQUksR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLEdBQUcsQ0FB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QUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQTFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFDSkEsQUFhQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBYkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFJQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUNWQSxBQUdBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neFhtbDJqc29uU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICB4bWxUb0pzb24oeG1sKSB7XG5cbiAgICBsZXQgb2JqID0ge307XG5cbiAgICBpZiAoeG1sLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBpZiAoeG1sLmF0dHJpYnV0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvYmpbJ0BhdHRyaWJ1dGVzJ10gPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB4bWwuYXR0cmlidXRlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHhtbC5hdHRyaWJ1dGVzLml0ZW0oaik7XG4gICAgICAgICAgb2JqWydAYXR0cmlidXRlcyddW2F0dHJpYnV0ZS5ub2RlTmFtZV0gPSBhdHRyaWJ1dGUubm9kZVZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4bWwubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIG9iaiA9IHhtbC5ub2RlVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHhtbC5oYXNDaGlsZE5vZGVzKCkgJiYgeG1sLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICYmIHhtbC5jaGlsZE5vZGVzWzBdLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICBvYmogPSB4bWwuY2hpbGROb2Rlc1swXS5ub2RlVmFsdWU7XG4gICAgfSBlbHNlIGlmICh4bWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB4bWwuY2hpbGROb2Rlcy5pdGVtKGkpO1xuICAgICAgICBjb25zdCBub2RlTmFtZSA9IGl0ZW0ubm9kZU5hbWU7XG4gICAgICAgIGlmICh0eXBlb2YgKG9ialtub2RlTmFtZV0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIG9ialtub2RlTmFtZV0gPSB0aGlzLnhtbFRvSnNvbihpdGVtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIChvYmpbbm9kZU5hbWVdLnB1c2gpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc3Qgb2xkID0gb2JqW25vZGVOYW1lXTtcbiAgICAgICAgICAgIG9ialtub2RlTmFtZV0gPSBbXTtcbiAgICAgICAgICAgIG9ialtub2RlTmFtZV0ucHVzaChvbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmpbbm9kZU5hbWVdLnB1c2godGhpcy54bWxUb0pzb24oaXRlbSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLW5neC14bWwyanNvbicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHA+XG4gICAgICBOZ3gteG1sMmpzb25cbiAgICA8L3A+XG4gIGAsXG4gIHN0eWxlczogW11cbn0pXG5leHBvcnQgY2xhc3MgTmd4WG1sMmpzb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7fVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4WG1sMmpzb25Db21wb25lbnQgfSBmcm9tICcuL25neC14bWwyanNvbi5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW05neFhtbDJqc29uQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW05neFhtbDJqc29uQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hYbWwyanNvbk1vZHVsZSB7IH1cbiJdfQ==","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { XmlJsonComponent } from './xml-json.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { SbTextareaModule } from 'src/app/shared/sb-textarea/sb-textarea.module';\nimport { SbHeadingModule } from 'src/app/shared/sb-heading/sb-heading.module';\nimport { SbRelatedToolsModule } from 'src/app/shared/sb-related-tools/sb-related-tools.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: XmlJsonComponent,\n  },\n];\n@NgModule({\n  declarations: [XmlJsonComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(routes),\n    SbTextareaModule,\n    SbHeadingModule,\n    SbRelatedToolsModule,\n  ],\n})\nexport class XmlJsonModule {}\n"],"sourceRoot":"webpack:///"}